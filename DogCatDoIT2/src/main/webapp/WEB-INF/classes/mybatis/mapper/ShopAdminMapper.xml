<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="shop">

	<select id="dataCount" resultType="Integer">
		SELECT COUNT(*)
		FROM item
		where enabled='1'
	</select>
	<select id="dataCountDogCat" parameterType="Integer"
		resultType="Integer">
		SELECT COUNT(*)
		FROM item i join itemcategory c on
		i.itemcategoryid=c.itemcategoryid
		where c.parentNum=#{num} and i.enabled='1'

	</select>
	<insert id="insertItem"
		parameterType="com.pet.app.shopping.Item">
		insert into item(itemId, itemCategoryId, shopStoreId,
		itemName,
		itemOriginalPrice, itemSalePrice,
		discountRate,
		registered, saveFileName, des, enabled, manufacturer,content)
		values
		(item_seq.NEXTVAL,#{itemCategoryId},#{shopStoreId},#{itemName},
		#{itemOriginalPrice}, #{itemSalePrice}, #{discountRate}, 
		SYSDATE, #{saveFileName}, #{des}, #{enabled},
		#{manufacturer},#{content})

	</insert>
	
	<delete id="deleteItem" parameterType="long">
	update item set enabled='0', saveFileName='' where itemId=#{num}
	</delete>
	
	<update id="updateItem" parameterType="com.pet.app.shopping.Item">
	update item set itemcategoryId=#{itemCategoryId},shopStoreId=#{shopStoreId},itemName=#{itemName}, itemOriginalPrice=#{itemOriginalPrice},
	itemSalePrice=#{itemSalePrice}, discountRate=#{discountRate}, saveFileName=#{saveFileName}, des=#{des}, content=#{content},
	manufacturer=#{manufacturer}
	where itemId=#{itemId}
	</update> 
	
	<insert id="insertOption" parameterType="map">
		insert into itemoption(optionId, itemid, optionname)
		values(itemoption_seq.NEXTVAL, #{num}, #{name})

	</insert>
	
	<select id="selectOptions" parameterType="long"
		resultType="com.pet.app.shopping.ItemOption">
		select optionId, itemid, optionname from itemoption where itemid=#{num}
	</select>
	
	<select id="selectdetailOptions" parameterType="long"
		resultType="com.pet.app.shopping.DetailOption">
		select detailId, itemoptionId, stock, detailname from detailitemoption where
		itemoptionid=#{num}
	</select>
	
	<select id="findbydetailOptionid" parameterType="long"
		resultType="com.pet.app.shopping.DetailOption">
		select detailId, itemoptionId, stock, detailname, optionname
		 from detailitemoption d join itemoption o on d.itemoptionid=o.optionid
		 where
		detailId=#{num}
	</select>
	
	<insert id="insertdetailOptions" parameterType="map">
	insert into detailitemoption(detailId,itemoptionid,stock,detailname) values(itemdetailoption_seq.NEXTVAL, #{optionNum}, #{stock}, #{name})
	</insert>
	
	<select id="selectAllOptions" parameterType="long" resultType="com.pet.app.shopping.DetailOption">
	select detailId, itemoptionId, stock, detailName, optionname
	from detailitemoption d join itemoption o on d.itemoptionid=o.optionid
	where o.itemid=#{num} order by itemoptionId
	</select>
	
	<select id="AlldetailOptions" resultType="com.pet.app.shopping.DetailOption">
	select detailId, itemoptionId, stock, detailName, optionname, i.itemname, s.shopStoreName 
	from detailitemoption d join itemoption o on d.itemoptionid=o.optionid
    join item i on i.itemId=o.itemid
    join shopstore s on i.shopStoreId=s.shopStoreId 
	where i.enabled='1' and s.enabled='1' 
	order by s.shopStoreName, i.itemId, o.optionid
	</select>
	
	<select id="selectItemCategory"
		resultType="com.pet.app.shopping.ItemCategory">
		select ItemCategoryId,ItemCategoryName,parentNum from
		ItemCategory
		order by parentNum
	</select>

	<select id="findItemCategory" parameterType="long"
		resultType="com.pet.app.shopping.ItemCategory">
		select ItemCategoryId,ItemCategoryName,parentNum from
		ItemCategory
		where ItemCategoryId=${id}
	</select>

	<select id="findItemByItemOption" parameterType="long" resultType="com.pet.app.shopping.Item">
	select i.itemId, itemCategoryId, shopStoreId,
		itemName,
		itemOriginalPrice, itemSalePrice,
		discountRate,
		registered, saveFileName, des, enabled, manufacturer,content
		from item i join itemoption o on i.itemid=o.itemid 
		join detailitemoption d on o.optionId=d.itemoptionId
		where d.detailId=#{num}
	</select>

	<select id="selectShopStore"
		resultType="com.pet.app.shopping.ShopStore">
		select
		shopStoreId,shopStoreName,shopStoreTel,shopStoreAddress1,shopStoreAddress2,enabled
		from shopStore where enabled='1'
	</select>
	
	<select id="findByShopStoreId"
		resultType="com.pet.app.shopping.ShopStore">
		select
		shopStoreId,shopStoreName,shopStoreTel,shopStoreAddress1,shopStoreAddress2,enabled
		from shopStore where shopStoreId=#{num}
	</select>
	<update id="deleteShopStore" parameterType="long">
		update shopStore set enabled='0' where shopStoreId=#{shopStoreId}
	
	</update>

	<select id="selectOnSale" resultType="com.pet.app.shopping.Item">
		select
		itemId,itemCategoryId,shopStoreId,itemName,itemOriginalPrice,
		itemSalePrice,discountRate,registered,saveFilename,
		des,content,enabled,manufacturer
		from(
		select
		itemId,itemCategoryId,shopStoreId,itemName,itemOriginalPrice,
		itemSalePrice,discountRate,registered,saveFilename,des,content,enabled,manufacturer
		from item
		where discountRate>0 and enabled='1'
		order by discountRate
		DESC)
		where rowNum &lt;=5
	</select>

	<select id="selectRecentItem"
		resultType="com.pet.app.shopping.Item">
		select
		itemId,itemCategoryId,shopStoreId,itemName,itemOriginalPrice,
		itemSalePrice,discountRate,registered,saveFilename,
		des,content,enabled,manufacturer
		from(
		select
		itemId,itemCategoryId,shopStoreId,itemName,itemOriginalPrice,
		itemSalePrice,discountRate,registered,saveFilename,
		des,content,enabled,manufacturer
		from item where enabled='1'
		order by
		registered DESC)
		where rowNum &lt;=8
	</select>

	<select id="isDogOrCat" parameterType="long" resultType="long">
		select
		c.parentNum
		from item i join itemCategory c on
		i.itemcategoryId=c.itemcategoryId
		where enabled='1' and i.itemId=#{id}
	</select>

	<!--관리자 페이지에서 보여줄 상품 리스트 -->
	<select id="selectItemList" parameterType="map"
		resultType="com.pet.app.shopping.Item">
		select
		itemId,itemCategoryId,shopStoreId,itemName,itemOriginalPrice,
		itemSalePrice,discountRate,registered,saveFilename,
		des,content,enabled,manufacturer
		from item
		where enabled='1'
		ORDER BY
		registered DESC
		OFFSET #{offset} ROWS FETCH FIRST
		#{rows} ROWS ONLY
	</select>


	<!-- 사용자 입장에서 볼 카테고리별 상품리스트 -->
	<select id="selectCategoryItemList" parameterType="map"
		resultType="com.pet.app.shopping.Item">
		select
		itemId,i.itemCategoryId,shopStoreId,itemName,itemOriginalPrice,
		itemSalePrice,discountRate,
		registered,saveFilename,
		des,content,enabled,manufacturer
		from item i
		join itemcategory c on
		i.itemcategoryId=c.itemcategoryId
		where enabled='1' and
		c.parentNum=#{num}
		<if test="sort!=null and sort!='' ">
		<trim prefix="ORDER BY">
            <if test="sort == 'forRecent'"> registered desc </if>
            <if test="sort == 'forhigh'">  itemsaleprice desc </if>                       
            <if test="sort == 'forlow'"> itemsaleprice </if>                       
            <if test="sort == 'fordiscount'">  discountrate desc  </if>                       
        </trim>
		</if>
		


	</select>

	<select id="readItem" parameterType="long"
		resultType="com.pet.app.shopping.Item">
		select
		itemId,itemCategoryId,shopStoreId,itemName,itemOriginalPrice,
		itemSalePrice,discountRate,registered,saveFilename,
		des,content,enabled,manufacturer
		from item
		where enabled='1' and
		itemId=#{num}
	</select>
	
	<insert id="insertShopStore" parameterType="com.pet.app.shopping.ShopStore">
	insert into shopstore(shopStoreId,shopStoreName,shopStoreTel,zip,shopStoreAddress1,shopStoreAddress2,enabled) 
	values(shopStore_seq.NEXTVAL,#{shopStoreName},#{shopStoreTel},#{zip}, #{shopStoreAddress1}, #{shopStoreAddress2},#{enabled}) 
	</insert>
	
	<update id="updateShopStore" parameterType="com.pet.app.shopping.ShopStore">
	update shopstore set shopStoreName=#{shopStoreName}, shopStoreTel=#{shopStoreTel}, 
	zip=#{zip}, shopStoreAddress1=#{shopStoreAddress1}, shopStoreAddress2=#{shopStoreAddress2} 
	where shopStoreId=#{shopStoreId} 
	</update>
	
	<select id="selectAllShopStore" resultType="com.pet.app.shopping.ShopStore">
	select shopStoreId,shopStoreName,shopStoreTel,zip,shopStoreAddress1,shopStoreAddress2,enabled
	 from shopStore 
	 order by shopStoreId
	</select>
	
	<select id="selectShopStoreOrder" resultType="com.pet.app.shopping.ShopStoreOrder">
	select id, s.detailid, count,s.registered , i.itemname, o.optionname, d.detailname 
		from shopstoreorder s join detailitemoption d on s.detailid=d.detailid
		join itemoption o on d.itemoptionid=o.optionid 
		join item i on o.itemid=i.itemid 
		order by registered desc
	</select>
	
	<insert id="insertShopStoreOrder" parameterType="map">
	insert into shopstoreorder(id, detailid, count, registered) values(shopstoreorder_seq.NEXTVAL, #{detailid}, #{count}, SYSDATE)
	</insert>
	
	<insert id="insertCoupon" parameterType="com.pet.app.shopping.Coupon">
	insert into shopcoupon(couponNum,couponName,deadline,stock,rate) 
	values (shopcoupon_seq.NEXTVAL, #{couponName},#{deadline},#{stock},#{rate})
	</insert>
	
	<select id="selectCouponList" resultType="com.pet.app.shopping.Coupon">
	select couponNum,couponName, deadline ,stock,rate 
	from shopcoupon 
	order by deadline desc
	</select>
	
	<insert id="insertReview" parameterType="com.pet.app.shopping.ShopReview">
	insert into review(reviewNum,useridx, itemId, score,content, registered) values(review_seq.NEXTVAL,#{useridx}, #{itemId}, #{score}, #{content}, SYSDATE)
	</insert>
	
	<select id="selectReview" parameterType="long" resultType="com.pet.app.shopping.ShopReview">
	select reviewNum, review.useridx, itemId, score,content, registered, member.name from review join member on review.useridx=member.useridx 
	where itemId=#{itemId}
	order by score desc
	</select>
	
	<select id="countReview" parameterType="long" resultType="Integer">
	select count(*)
	from review
	where itemId=#{itemId}
	</select>
	
	<select id="sumReview" parameterType="long" resultType="Integer">
	select sum(score)
	from review
	 where itemId=#{itemId}
	</select>
	
	<delete id="deletereview" parameterType="map">
	delete from review where reviewnum=#{reviewNum} and useridx=#{useridx}
	</delete>
	
	<select id="findByReviewId" parameterType="long" resultType="com.pet.app.shopping.ShopReview">
	select reviewNum,useridx, itemId, score,content, registered 
	from review
	where reviewNum=#{reviewNum}
	</select>
	
	<update id="updateReview" parameterType="com.pet.app.shopping.ShopReview">
		update review set score=#{score}, content=#{content}
		where reviewNum=#{reviewNum}
	</update>
	
	<select id="isUserBought" parameterType="map" resultType="Integer">
	select count(*)
	from shoporder so join shoporderdetail sod on so.orderidx=sod.orderidx
	join detailitemoption d on sod.detailid=d.detailid
	join itemoption i on d.itemoptionid=i.optionid
	where so.useridx=#{useridx} and i.itemid=#{itemId} and so.state=2
	
	</select>
	
	<!--해당 상품에 리뷰를 남긴개수 -->
	<select id="ItemReviewCount" parameterType="map" resultType="Integer">
	select count(*)
	from review
	where useridx=#{useridx} and itemid=#{itemId}
	</select>
	
	<!-- dashboard에 필요한 데이터 -->
	<select id="AllshoporderCount" resultType="Integer">
	select count(*)
	from shoporder
	</select>	
	
	<select id="AllShopCustomerCount" resultType="Integer">
	select count(*) from(
	select useridx, count(*)
	from shoporder
	group by useridx)
	</select>
	
	<!-- 주문한 상품들의 원가 합 -->
	<select id="sumoriginalPrice" resultType="long">
	select sum(it.itemoriginalprice*sod.qty)
	from shoporder so join shoporderdetail sod on so.orderidx=sod.orderidx
	join detailitemoption d on sod.detailid=d.detailid
	join itemoption i on d.itemoptionid=i.optionid
	join item it on i.itemid=it.itemid
	</select>
	
	<!-- 총 매출액 -->
	<select id="sumsalesPrice" resultType="long">
	select sum(totalpayment)
	from shoporder
	</select>
	
	<!-- 월별 매출액 -->
	<select id="saleforday" resultType="com.pet.app.shopping.DashboardDTO" parameterType="map">
	select
    sum(m1) "m1", sum(m2) "m2", sum(m3) "m3", sum(m4) "m4",
    sum(m5) "m5", sum(m6) "m6", sum(m7) "m7", sum(m8) "m8",
    sum(m9) "m9", sum(m10) "m10", sum(m11) "m11", sum(m12) "m12"
from
    (
        select  decode(to_char(order_date, 'yyyy-mm'), #{m1}, sum(totalpayment), 0) m1,
                decode(to_char(order_date, 'yyyy-mm'), #{m2}, sum(totalpayment), 0) m2,
                decode(to_char(order_date, 'yyyy-mm'), #{m3}, sum(totalpayment), 0) m3,
                decode(to_char(order_date, 'yyyy-mm'), #{m4}, sum(totalpayment), 0) m4,
                decode(to_char(order_date, 'yyyy-mm'), #{m5}, sum(totalpayment), 0) m5,
                decode(to_char(order_date, 'yyyy-mm'), #{m6}, sum(totalpayment), 0) m6,
                decode(to_char(order_date, 'yyyy-mm'), #{m7}, sum(totalpayment), 0) m7,
                decode(to_char(order_date, 'yyyy-mm'), #{m8}, sum(totalpayment), 0) m8,
                decode(to_char(order_date, 'yyyy-mm'), #{m9}, sum(totalpayment), 0) m9,
                decode(to_char(order_date, 'yyyy-mm'), #{m10}, sum(totalpayment), 0) m10,
                decode(to_char(order_date, 'yyyy-mm'), #{m11}, sum(totalpayment), 0) m11,
                decode(to_char(order_date, 'yyyy-mm'), #{m12}, sum(totalpayment), 0) m12
        from shoporder
        group by to_char(order_date, 'yyyy-mm')
    )
	</select>
	
	<select id="dashboardbestitem" resultType="com.pet.app.shopping.BestItemDTO">
	select detailid , itemname, optionname,detailname, qty
	from(
	select d.detailid detailid , i.itemname itemname, io.optionname optionname,d.detailname detailname, sum(qty) qty 
	from shoporderdetail sod join detailitemoption d on sod.detailid=d.detailid
	join itemoption io on d.itemoptionid=io.optionid
	join item i on io.itemid=i.itemid
	group by d.detailid , i.itemname, io.optionname,d.detailname)
	where rownum &lt;=10
	</select>
</mapper>