<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="company">
	<insert id="insertCompany" parameterType="com.pet.app.company.Company">
		INSERT INTO companyboard(boardnum, userId, subject, content,
	          saveFilename, originalFilename, hitCount, created) VALUES
	         (companyboard_seq.NEXTVAL, #{userId}, #{subject}, #{content},
	           #{saveFilename, jdbcType=VARCHAR}, 
	           #{originalFilename, jdbcType=VARCHAR},
	           0, SYSDATE
	         )
	</insert>
	<sql id="where-list">
		<choose>
			<when test="condition == 'all' ">
			   ( INSTR(subject, #{keyword}) &gt; 0
		          OR DBMS_LOB.INSTR(content, #{keyword}) &gt; 0 )
			</when>
			<when test="condition == 'created' ">
			   ( TO_CHAR(created, 'YYYYMMDD') = #{keyword}
		          OR TO_CHAR(created, 'YYYY-MM-DD') = #{keyword} )
			</when>
			<when test="condition == 'content'">
			    DBMS_LOB.INSTR(content, #{keyword}) &gt; 0
			</when>
			<otherwise>
			    INSTR(${condition}, #{keyword}) &gt; 0
			</otherwise>
		</choose>
	</sql>

	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM companyboard b
		JOIN member m ON b.userId=m.userId
		<where>
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-list"/>
			</if>
		</where>   
	</select>

	<select id="listCompany" parameterType="map" resultType="com.pet.app.company.Company">
		SELECT b.boardnum, b.userId, subject, 
		       TO_CHAR(b.created, 'YYYY-MM-DD') created,
		       hitCount, saveFilename,
		       NVL(ReviewCount, 0) ReviewCount
		FROM companyboard b
		JOIN member m ON b.userId=m.userId
		LEFT OUTER JOIN (
			SELECT boardnum, COUNT(*) ReviewCount FROM companyboardReview
			GROUP BY boardnum
		) c ON b.boardnum = c.boardnum
		<where>
			<if test="keyword != null and keyword != ''">
				<include refid="where-list"/>
			</if>
		</where>
		ORDER BY boardnum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	<select id="readCompany" parameterType="Integer" resultType="com.pet.app.company.Company">
		SELECT b.boardnum, b.userId, subject, content,
			   hitCount, b.created,  saveFilename, originalFilename,
			   NVL(companyboardLikeCount, 0) companyboardLikeCount
		FROM companyboard b
		JOIN member m ON b.userId=m.userId
		LEFT OUTER JOIN (
			SELECT boardnum, COUNT(*) companyboardLikeCount FROM companyboardLike
			GROUP BY boardnum
		) bc ON b.boardnum = bc.boardnum
		WHERE b.boardnum = #{boardnum}
	</select>
		<update id="updateHitCount" parameterType="Integer">
		UPDATE companyboard SET hitCount=hitCount+1 WHERE boardnum = #{boardnum}
	</update>
		<select id="preReadCompany" parameterType="map" resultType="com.pet.app.company.Company">
		SELECT boardnum, subject
		FROM companyboard b
		JOIN member m ON b.userId=m.userId
		<where>
			<if test="keyword != null and keyword != '' ">
				<include refid="where-list"/>
			</if>
			AND (boardnum &gt; #{boardnum})
		</where>
		ORDER BY boardnum ASC
		FETCH FIRST 1 ROWS ONLY
	</select>
	<select id="nextReadCompany" parameterType="map" resultType="com.pet.app.company.Company">
		SELECT boardnum, subject
		FROM companyboard b
		JOIN member m ON b.userId=m.userId
		<where>
			<if test="keyword != null and keyword != '' ">
				<include refid="where-list"/>
			</if>
			AND (boardnum &lt; #{boardnum})
		</where>
		ORDER BY boardnum DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	<update id="updateCompany" parameterType="com.pet.app.company.Company">
		UPDATE companyboard SET subject=#{subject}, content=#{content},
				saveFilename=#{saveFilename, jdbcType=VARCHAR},
				originalFilename=#{originalFilename, jdbcType=VARCHAR}
		WHERE boardnum = #{boardnum}
	</update>
      	<delete id="deleteCompany" parameterType="Integer">
		DELETE FROM companyboard WHERE boardnum = #{boardnum}
	</delete>
      
	<insert id="insertCompanyLike" parameterType="map">
		INSERT INTO companyboardLike(boardnum, userId) VALUES (#{boardnum}, #{userId})
	</insert>
      
	<select id="companyboardLikeCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM companyboardLike WHERE boardnum=#{boardnum}
	</select>
	<insert id="insertReview" parameterType="com.pet.app.company.Review">
		INSERT INTO companyboardReview(reviewNum, boardnum, userId, content, created)
			VALUES (companyboardReview_seq.NEXTVAL, #{boardnum}, #{userId}, #{content}, SYSDATE)
	</insert>

	<select id="ReviewCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) FROM companyboardReview
		WHERE boardnum=#{boardnum} 
	</select>

	<select id="listReview" parameterType="map" resultType="com.pet.app.company.Review">
		SELECT r.reviewNum, r.userId, boardnum, content, r.created, 
		       NVL(likeCount, 0) likeCount,
		       NVL(disLikeCount, 0) disLikeCount
		FROM companyboardReview r
		JOIN member m ON r.userId = m.userId
		LEFT OUTER JOIN (
			SELECT reviewNum, COUNT(DECODE(companyboardReviewLike, 1, 1)) likeCount,
				   COUNT(DECODE(reviewLike, 0, 1)) disLikeCount
			FROM companyboardReviewLike GROUP BY reviewNum
		) c ON r.reviewNum = c.reviewNum
		WHERE boardnum=#{boardnum}
		ORDER BY r.reviewNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	<delete id="deleteReview" parameterType="map">
		DELETE FROM companyboardReview
		WHERE reviewNum=#{reviewNum}
	</delete>
</mapper>