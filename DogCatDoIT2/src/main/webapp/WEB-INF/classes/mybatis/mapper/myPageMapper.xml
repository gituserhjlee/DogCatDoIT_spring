<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="myPage">
	<!-- 유저프로필 입력 -->
	<insert id="insertUserProfile" parameterType="com.pet.app.myPage.UserProfile">
		INSERT INTO userProfile (profileNum, animalName, animalBirth, region, animalKind, introduce, userId, animalPhoto)
		VALUES (userProfile_seq.NEXTVAL, #{animalName}, #{animalBirth}, #{region}, #{animalKind}, #{introduce}, #{userId}, #{animalPhoto})
	</insert>
	
	<!-- 생일로 나이 구하기(1살 이상) -->
	<select id="getAge1" parameterType="Integer" resultType="Integer">
		SELECT TRUNC(MONTHS_BETWEEN(SYSDATE, animalBirth)/12) age FROM userProfile WHERE profileNum = #{profileNum}
	</select>
	
	<!-- 생일로 나이 구하기(1살 이하) -->
	<select id="getAge2" parameterType="Integer" resultType="Integer">
		SELECT TRUNC(MOD(MONTHS_BETWEEN(SYSDATE, animalBirth),12)) age FROM userProfile WHERE profileNum = #{profileNum}
	</select>
	
	<!-- 프로필 개수 -->
	<select id="countUserProfile" parameterType="String" resultType="Integer">
		SELECT COUNT(*) FROM userProfile WHERE userId=#{userId}
	</select>
	
	<!-- 유저프로필 -->
	<select id="readUserProfile" parameterType="Integer" resultType="com.pet.app.myPage.UserProfile">
		SELECT profileNum, animalName, TO_CHAR(animalBirth, 'YYYY-MM-DD') animalBirth, region, animalKind, introduce, userId, animalPhoto 
		FROM userProfile 
		WHERE profileNum = #{profileNum}
	</select>
	
	<!-- 유저프로필 리스트 -->
	<select id="listUserProfile" parameterType="String" resultType="com.pet.app.myPage.UserProfile">
		SELECT profileNum, animalName, TO_CHAR(animalBirth, 'YYYY-MM-DD') animalBirth, region, animalKind, introduce, userId, animalPhoto 
		FROM userProfile 
		WHERE userId = #{userId}
	</select>
	
	<!-- 유저프로필 수정 -->
	<update id="updateUserProfile" parameterType="com.pet.app.myPage.UserProfile">
		UPDATE userProfile SET animalName=#{animalName}, animalBirth=#{animalBirth}, region=#{region}, animalKind=#{animalKind}, introduce=#{introduce}, animalPhoto=#{animalPhoto} 
		WHERE profileNum = #{profileNum}
	</update>
	
	<!-- 유저프로필 삭제 -->
	<delete id="deleteUserProfile" parameterType="Integer">
		DELETE userProfile WHERE profileNum = #{profileNum}
	</delete>
	
	<!-- 자격 신청 입력 -->
	<insert id="insertRequestQualification" parameterType="com.pet.app.myPage.Qualification">
		INSERT INTO requestQualification (requestNum, userId, name, tel, originalFilename, saveFilename, gubun, state, req_date)
		VALUES (request_seq.NEXTVAL, #{userId}, #{name}, #{tel}, #{originalFilename}, #{saveFilename}, #{gubun}, 'requesting', SYSDATE)
	</insert>
	
	<!-- 자격 신청 내역 -->
	<select id="listRequestQualification" parameterType="String" resultType="com.pet.app.myPage.Qualification">
		SELECT requestNum, userId, name, tel, originalFilename, saveFilename, gubun, state, TO_CHAR(req_date, 'YYYY-MM-DD') req_date 
		FROM requestQualification
		WHERE userId = #{userId}
	</select>
	
	<!-- 자격 신청 내용 -->
	<select id="readRequestQualification" parameterType="Integer" resultType="com.pet.app.myPage.Qualification">
		SELECT requestNum, userId, name, tel, originalFilename, saveFilename, gubun, state, TO_CHAR(req_date, 'YYYY-MM-DD') req_date 
		FROM requestQualification
		WHERE requestNum = #{requestNum}
	</select>
	
	<!-- 자격 신청 수정 -->
	<update id="updateRequestQualification" parameterType="com.pet.app.myPage.Qualification">
		UPDATE requestQualification SET originalFilename=#{originalFilename}, saveFilename=#{saveFilename}, gubun=#{gubun}
		WHERE requestNum = #{requestNum}
	</update>
	
	<!-- 자격 신청 삭제 -->
	<delete id="deleteRequestQualification" parameterType="Integer">
		DELETE requestQualification WHERE requestNum = #{requestNum}
	</delete>
	
	<!-- 자격 신청 승인 -->
	<update id="approveRequestQualification" parameterType="map">
		UPDATE requestQualification SET state=#{state}
		WHERE requestNum = #{requestNum}
	</update>
	
	<!-- 펫시터, 훈련사 프로필 입력 -->
	<insert id="insertMasterProfile" parameterType="com.pet.app.myPage.PetMasterProfile">
		INSERT INTO petMaster (masterNum, userId, introduce, qualification, reg_date, region, imageFilename)
		VALUES (master_seq.NEXTVAL, #{userId}, #{introduce}, #{qualification}, SYSDATE, #{region}, #{imageFilename})
	</insert>
	
	<!-- 펫시터, 훈련사 프로필 -->
	<select id="readMasterProfile" parameterType="String" resultType="com.pet.app.myPage.PetMasterProfile">
		SELECT masterNum, userName, introduce, qualification, reg_date, region, imageFilename
		FROM petMaster pm
		JOIN member m ON m.userId = pm.userId
		WHERE m.userId = #{userId}
	</select>
	
	<!-- 펫시터, 훈련사 프로필 수정 -->
	<update id="updateMasterProfile" parameterType="com.pet.app.myPage.PetMasterProfile">
		UPDATE petMaster SET introduce=#{introduce}, qualification=#{qualification}, region=#{region}, imageFilename=#{imageFilename} 
		WHERE masterNum = #{masterNum}
	</update>
	
	<!-- 펫시터, 훈련사 프로필 삭제(관리자) -->
	<delete id="deleteMasterProfile" parameterType="Integer">
		DELETE petMaster WHERE masterNum = #{masterNum}
	</delete>
	
	<!-- 업체 프로필 입력 -->

	
	<!-- 업체 프로필 -->
	
	
	<!-- 업체 프로필 수정 -->
	
	
	<!-- 업체 프로필 삭제(관리자) -->
	
	
	<!-- 리뷰, 별점 입력 -->
	<insert id="insertMasterRnR" parameterType="com.pet.app.myPage.MasterRnR">
		INSERT INTO masterRnR (reviewNum, review, rating, reserveNum)
		VALUES (review_seq.NEXTVAL, #{review}, #{rating}, #{reserveNum})
	</insert>
	
	<!-- 리뷰, 별점 조회(업체 측) -->
	<select id="readMasterRnR1" parameterType="Integer" resultType="com.pet.app.myPage.MasterRnR">
		SELECT reviewNum, review, rating, userName FROM masterRnR mrr
		JOIN masterReserve mr ON mr.reserveNum = mrr.reserveNum
		JOIN masterService ms ON ms.serviceNum = mr.serviceNum
		JOIN petMaster pm ON pm.masterNum = ms.masterNum
		WHERE pm.masterNum = #{masterNum}
	</select>
	
	<!-- 리뷰, 별점 조회(사용자 측) -->
	<select id="readMasterRnR2" parameterType="String" resultType="com.pet.app.myPage.MasterRnR">
		SELECT reviewNum, review, rating FROM masterRnR
		WHERE userId = #{userId}
	</select>
	
	
	<!-- 리뷰, 별점 수정 -->
	<update id="updateMasterRnR" parameterType="com.pet.app.myPage.MasterRnR">
		UPDATE masterRnR SET review = #{review}, rating = #{rating} WHERE reviewNum = #{reviewNum}
	</update>
	
	<!-- 리뷰, 별점 삭제 -->
	<delete id="deleteMasterRnR" parameterType="Integer">
		DELETE masterRnR WHERE reviewNum = #{reviewNum}
	</delete>
	
	<!-- 회원 등급 업데이트(member 테이블) -->
	<update id="updateCLevel" parameterType="String">
		UPDATE member SET cLevel=cLevel+1 WHERE userId=#{userId}
	</update>
	
	<!-- 자격 업데이트(qualification 테이블) -->
	
	
	<!-- 포인트 지급 (출석) (member 테이블 업데이트) -->
	<update id="attendancePoint" parameterType="map">
		UPDATE member SET point=#{point}
	</update>
	
	<!-- 포인트 지급 (게시글 좋아요 10 달성시) (member 테이블 업데이트) -->
	<update id="goodPoint" parameterType="String">
		UPDATE member SET point=point+500 WHERE userId=#{userId}
	</update>
	
	<!-- 포인트 조회 -->
	<select id="readPoint" parameterType="String" resultType="Integer">
		SELECT point FROM member WHERE userId=#{userId}
	</select>
	
	<!-- 포인트 내역 저장 -->
	<insert id="insertPointHistory" parameterType="com.pet.app.myPage.PointHistory">
		INSERT INTO pointHistory (pointNum, userId, amount, by_what, get_date) 
		VALUES (pointHistory_seq.NEXTVAL, #{userId}, #{amount}, #{by_what}, SYSDATE)
	</insert>
	
	<!-- 포인트 내역 -->
	<select id="readPointHistroy" parameterType="map" resultType="com.pet.app.myPage.PointHistory">
		SELECT pointNum, userId, amount, by_what, get_date FROM pointHistory 
		WHERE userId = #{userId} AND MONTHS_BETWEEN(SYSDATE, get_Date) &lt;= 12
	</select>
	
	
	<!-- 쿠폰 지급 -->
	
	
	<!-- 쿠폰 사용 -->
	
	
	<!-- 쿠폰 조회 -->
	
	
	<!-- 출석체크 내역입력 -->
	<insert id="insertAttendance" parameterType="String">
		INSERT INTO attendance (attendanceNum, userId, attendanceDate) 
		VALUES (attendance_seq.NEXTVAL, #{userId}, SYSDATE)
	</insert>
	
	<!-- 출석체크 내역 -->
	<select id="readAttendance" parameterType="String" resultType="com.pet.app.myPage.Attendance">
		SELECT * FROM ATTENDANCE WHERE userId=#{userId} AND attendanceDate=(SELECT TO_CHAR(SYSDATE, 'YY/MM/DD') FROM dual)
	</select>
	
	<!-- 출석체크 일 수 -->
	<select id="countAttendance" parameterType="String" resultType="Integer">
		SELECT COUNT(*) FROM attendance WHERE userId = #{userId}
	</select>
	
	<!-- 출석체크 초기화(매월 1일마다) -->
	<delete id="initAttendance">
		DELETE FROM attendance
	</delete>
	
	<!-- 일정등록 -->
	<insert id="insertUserCalendar" parameterType="com.pet.app.myPage.UserCalendar">
		INSERT INTO userCalendar(userCalendarNum, userId, subject, color, sday, eday,
					stime, etime, repeat, repeat_cycle, memo, created) 
				VALUES(userCalendar_seq.NEXTVAL, #{userId}, #{subject},
					#{color}, #{sday},
					#{eday, jdbcType=VARCHAR},
					#{stime, jdbcType=VARCHAR},
					#{etime, jdbcType=VARCHAR},
					#{repeat}, #{repeat_cycle},
					#{memo, jdbcType=VARCHAR},
					SYSDATE
		)
	</insert>
	
	<!-- 달력가져오기 -->
	<select id="listMonth" parameterType="map" resultType="com.pet.app.myPage.UserCalendar">
		SELECT userCalendarNum id, subject title, sday, eday, stime, etime,
				color, repeat, repeat_cycle, memo, created
		FROM userCalendar
		<where>
			userId = #{userId} AND
			<if test="group !='all' ">
				color=#{group} AND 
			</if>
			( 
				( 
					 ( TO_DATE(sday, 'YYYY-MM-DD') &gt;= TO_DATE(#{start}, 'YYYY-MM-DD')
						AND TO_DATE(sday, 'YYYY-MM-DD') &lt;= TO_DATE(#{end}, 'YYYY-MM-DD')
					 ) OR ( TO_DATE(eday, 'YYYY-MM-DD') &gt;= TO_DATE(#{start}, 'YYYY-MM-DD') 
					     AND TO_DATE(eday, 'YYYY-MM-DD') &lt;= TO_DATE(#{end}, 'YYYY-MM-DD')
					 )
				) OR (
					repeat=1 AND repeat_cycle!=0
						AND ADD_MONTHS(TO_DATE(sday, 'YYYY-MM-DD'), 12 * repeat_cycle*TRUNC(((SUBSTR(#{start},1,4)-SUBSTR(sday,1,4))/repeat_cycle))) &gt;= TO_DATE(#{start}, 'YYYY-MM-DD')
						AND ADD_MONTHS(TO_DATE(sday, 'YYYY-MM-DD'), 12 * repeat_cycle*TRUNC(((SUBSTR(#{start},1,4)-SUBSTR(sday,1,4))/repeat_cycle))) &lt;= TO_DATE(#{end}, 'YYYY-MM-DD')
			  )
			)
		</where>
		ORDER BY sday ASC, id DESC 
	</select>
	
	<!-- 일정 가져오기 -->
	<select id="readUserCalendar" parameterType="Integer" resultType="com.pet.app.myPage.UserCalendar">
		SELECT userCalendarNum, subject, sday, eday, stime, etime,
			color, repeat, repeat_cycle, memo, created 
		FROM userCalendar
		WHERE userCalendarNum = #{userCalendarNum}
	</select>
	
	<!-- 일정 수정 -->
	<update id="updateUserCalendar" parameterType="com.pet.app.myPage.UserCalendar">
		UPDATE userCalendar SET
			subject=#{subject}, color=#{color}, sday=#{sday}, 
			eday=#{eday, jdbcType=VARCHAR},
			stime=#{stime, jdbcType=VARCHAR},
			etime=#{etime, jdbcType=VARCHAR},
			repeat=#{repeat},
			repeat_cycle=#{repeat_cycle},
			memo=#{memo, jdbcType=VARCHAR}
		WHERE userCalendarNum=#{userCalendarNum} AND userId=#{userId}
	</update>
	
	<!-- 일정 삭제 -->
	<delete id="deleteUserCalendar" parameterType="map">
		DELETE FROM userCalendar WHERE userCalendarNum=#{userCalendarNum} AND userId=#{userId}
	</delete>
	
	
	<!-- 예약내역 -->
	
	
	<!-- 글 쓴 내역 -->
	
	
	<!-- 회원 정보 수정 -->
	<update id="setMember" parameterType="com.pet.app.member.Member">
		UPDATE member SET pwd=#{pwd}, zip=#{zip}, addr1=#{addr1}, addr2=#{addr2}, email=#{email}, tel=#{tel} 
		WHERE userId=#{userId}
	</update>
	
	<!-- 회원 탈퇴 -->
	<delete id="deleteMember" parameterType="String">
		DELETE member WHERE userId = #{userId}
	</delete>
	
</mapper>